openapi: 3.0.0
info:
  title: Repo2Graph API
  description: API for exploring and querying code repositories as graph data
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development server
paths:
  /nodes:
    get:
      summary: /nodes
      description: Get nodes from the graph database
      parameters:
        - name: node_type
          in: query
          description: Type of node to retrieve
          schema:
            type: string
            enum: [Page, Function, Class, Trait, Datamodel, Request, Endpoint, UnitTest, IntegrationTest, E2etest]
          example: Function
        - name: concise
          in: query
          description: Only include name and file in returned data
          schema:
            type: boolean
          example: true
        - name: ref_ids
          in: query
          description: Comma-separated list of reference IDs
          schema:
            type: string
          example: "123,456,789"
        - name: output
          in: query
          description: Output format
          schema:
            type: string
            enum: [json, snippet]
          example: json
        - name: language
          in: query
          description: Filter by programming language
          schema:
            type: string
          example: typescript
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /edges:
    get:
      summary: /edges
      description: Get edges from the graph database
      parameters:
        - name: edge_type
          in: query
          description: Type of edge to retrieve
          schema:
            type: string
            enum: [CALLS, USES, OPERAND, CONTAINS, IMPORTS, OF, HANDLER, RENDERS]
          example: CALLS
        - name: concise
          in: query
          description: Only include name and file in returned data
          schema:
            type: boolean
          example: true
        - name: ref_ids
          in: query
          description: Comma-separated list of reference IDs
          schema:
            type: string
          example: "123,456,789"
        - name: output
          in: query
          description: Output format
          schema:
            type: string
            enum: [json, snippet]
          example: json
        - name: language
          in: query
          description: Filter by programming language
          schema:
            type: string
          example: typescript
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /graph:
    get:
      summary: /graph
      description: Get a subgraph with nodes and edges
      parameters:
        - name: edge_type
          in: query
          description: Type of edge to include
          schema:
            type: string
            enum: [CALLS, USES, OPERAND, CONTAINS, IMPORTS, OF, HANDLER, RENDERS]
          example: CALLS
        - name: concise
          in: query
          description: Only include name and file in returned data
          schema:
            type: boolean
          example: true
        - name: edges
          in: query
          description: Include edges in the response
          schema:
            type: boolean
          example: true
        - name: language
          in: query
          description: Filter by programming language
          schema:
            type: string
          example: typescript
        - name: since
          in: query
          description: Filter nodes added after this date
          schema:
            type: string
            format: date-time
          example: "2023-01-01T00:00:00Z"
        - name: limit
          in: query
          description: Maximum number of nodes to return
          schema:
            type: integer
          example: 100
        - name: limit_mode
          in: query
          description: How to apply the limit
          schema:
            type: string
            enum: [total, per_type]
          example: total
        - name: node_types
          in: query
          description: Comma-separated list of node types to include
          schema:
            type: string
          example: "Page,Function,Endpoint"
        - name: ref_ids
          in: query
          description: Comma-separated list of reference IDs
          schema:
            type: string
          example: "123,456,789"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes:
                    type: array
                    items:
                      type: object
                  edges:
                    type: array
                    items:
                      type: object
                  status:
                    type: string
                  meta:
                    type: object
  /search:
    get:
      summary: /search
      description: Search for nodes in the graph
      parameters:
        - name: query
          in: query
          description: Search query
          required: true
          schema:
            type: string
          example: "authentication"
        - name: limit
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
          example: 25
        - name: concise
          in: query
          description: Only include name and file in returned data
          schema:
            type: boolean
          example: true
        - name: node_types
          in: query
          description: Comma-separated list of node types to search
          schema:
            type: string
          example: "Function,Endpoint"
        - name: node_type
          in: query
          description: Single node type to search
          schema:
            type: string
          example: Function
        - name: method
          in: query
          description: Search method to use
          schema:
            type: string
            enum: [fulltext, vector]
          example: vector
        - name: output
          in: query
          description: Output format
          schema:
            type: string
            enum: [json, snippet]
          example: snippet
        - name: tests
          in: query
          description: Include test files in search results
          schema:
            type: boolean
          example: false
        - name: max_tokens
          in: query
          description: Maximum tokens to include in results
          schema:
            type: integer
          example: 10000
        - name: language
          in: query
          description: Filter by programming language
          schema:
            type: string
          example: typescript
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /map:
    get:
      summary: /map
      description: Generate a visual map of node relationships
      parameters:
        - name: node_type
          in: query
          description: Type of node to map
          schema:
            type: string
            enum: [Page, Function, Class, Trait, Datamodel, Request, Endpoint, UnitTest, IntegrationTest, E2etest]
          example: Page
        - name: name
          in: query
          description: Name of the node
          schema:
            type: string
          example: "LeaderboardPage"
        - name: ref_id
          in: query
          description: Reference ID of the node
          schema:
            type: string
          example: "123"
        - name: tests
          in: query
          description: Include test files in the map
          schema:
            type: boolean
          example: true
        - name: depth
          in: query
          description: Depth of relationships to include
          schema:
            type: integer
          example: 7
        - name: direction
          in: query
          description: Direction of relationships to follow
          schema:
            type: string
            enum: [incoming, outgoing, both]
          example: both
        - name: trim
          in: query
          description: Node types to trim from the map
          schema:
            type: string
          example: "Import,Directory"
      responses:
        '200':
          description: HTML representation of the map
          content:
            text/html:
              schema:
                type: string
  /repo_map:
    get:
      summary: /repo_map
      description: Generate a map of a repository
      parameters:
        - name: name
          in: query
          description: Name of the repository
          schema:
            type: string
          example: "my-repo"
        - name: ref_id
          in: query
          description: Reference ID of the repository
          schema:
            type: string
          example: "123"
        - name: node_type
          in: query
          description: Type of node to map
          schema:
            type: string
            default: Repository
          example: Repository
        - name: include_functions_and_classes
          in: query
          description: Include functions and classes in the map
          schema:
            type: boolean
          example: true
      responses:
        '200':
          description: HTML representation of the repository map
          content:
            text/html:
              schema:
                type: string
  /code:
    get:
      summary: /code
      description: Get code for a specific node
      parameters:
        - name: node_type
          in: query
          description: Type of node
          schema:
            type: string
            enum: [Page, Function, Class, Trait, Datamodel, Request, Endpoint, UnitTest, IntegrationTest, E2etest]
          example: Function
        - name: name
          in: query
          description: Name of the node
          schema:
            type: string
          example: "authenticateUser"
        - name: ref_id
          in: query
          description: Reference ID of the node
          schema:
            type: string
          example: "123"
        - name: tests
          in: query
          description: Include test files
          schema:
            type: boolean
          example: true
        - name: depth
          in: query
          description: Depth of code to include
          schema:
            type: integer
          example: 7
        - name: direction
          in: query
          description: Direction of relationships to follow
          schema:
            type: string
            enum: [incoming, outgoing, both]
          example: both
        - name: trim
          in: query
          description: Node types to trim from the code
          schema:
            type: string
          example: "Import,Directory"
      responses:
        '200':
          description: Code content
          content:
            text/plain:
              schema:
                type: string
  /shortest_path:
    get:
      summary: /shortest_path
      description: Find the shortest path between two nodes
      parameters:
        - name: start_node_key
          in: query
          description: Key of the starting node
          schema:
            type: string
          example: "Function:authenticateUser"
        - name: end_node_key
          in: query
          description: Key of the ending node
          schema:
            type: string
          example: "Datamodel:User"
        - name: start_ref_id
          in: query
          description: Reference ID of the starting node
          schema:
            type: string
          example: "123"
        - name: end_ref_id
          in: query
          description: Reference ID of the ending node
          schema:
            type: string
          example: "456"
      responses:
        '200':
          description: Path between nodes
          content:
            text/plain:
              schema:
                type: string
  /upload:
    post:
      summary: /upload
      description: Upload files to be processed and added to the graph
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Upload successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestId:
                    type: string
                  status:
                    type: string
  /status/{requestId}:
    get:
      summary: /status/{requestId}
      description: Check the status of an upload request
      parameters:
        - name: requestId
          in: path
          required: true
          description: ID of the upload request
          schema:
            type: string
      responses:
        '200':
          description: Status information
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  progress:
                    type: number
  /schema:
    get:
      summary: /schema
      description: Get the schema of the graph database
      responses:
        '200':
          description: Schema information
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    node_type:
                      type: string
                    description:
                      type: string
  /ontology:
    get:
      summary: /ontology
      description: Get the ontology of the graph database (alias for /schema)
      responses:
        '200':
          description: Ontology information
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    node_type:
                      type: string
                    description:
                      type: string
  /rules_files:
    get:
      summary: /rules_files
      description: Get files containing rules or configurations
      responses:
        '200':
          description: Rules files
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /services:
    get:
      summary: /services
      description: Get services configuration
      parameters:
        - name: clone
          in: query
          description: Clone repository to extract services
          schema:
            type: boolean
          example: true
        - name: repo_url
          in: query
          description: URL of the repository to clone
          schema:
            type: string
          example: "https://github.com/username/repo"
        - name: username
          in: query
          description: GitHub username for authentication
          schema:
            type: string
        - name: pat
          in: query
          description: Personal access token for authentication
          schema:
            type: string
        - name: commit
          in: query
          description: Specific commit to checkout
          schema:
            type: string
      responses:
        '200':
          description: Services configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  services:
                    type: array
                    items:
                      type: object
                  containers:
                    type: array
                    items:
                      type: object
  /explore:
    get:
      summary: /explore
      description: Explore the codebase with a prompt
      parameters:
        - name: prompt
          in: query
          required: true
          description: Exploration prompt
          schema:
            type: string
          example: "How does authentication work?"
      responses:
        '200':
          description: Exploration results
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
  /understand:
    get:
      summary: /understand
      description: Get understanding of the codebase based on a question
      parameters:
        - name: question
          in: query
          required: true
          description: Question about the codebase
          schema:
            type: string
          example: "How does the login flow work?"
        - name: threshold
          in: query
          description: Similarity threshold for vector search
          schema:
            type: number
          example: 0.88
        - name: provider
          in: query
          description: AI provider to use
          schema:
            type: string
      responses:
        '200':
          description: Understanding results
          content:
            application/json:
              schema:
                type: object
  /seed_understanding:
    post:
      summary: /seed_understanding
      description: Seed the system with understanding of the codebase
      responses:
        '200':
          description: Seeding results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /ask:
    get:
      summary: /ask
      description: Ask a question about the codebase
      parameters:
        - name: question
          in: query
          required: true
          description: Question about the codebase
          schema:
            type: string
          example: "What is the authentication flow?"
        - name: threshold
          in: query
          description: Similarity threshold for vector search
          schema:
            type: number
          example: 0.88
        - name: provider
          in: query
          description: AI provider to use
          schema:
            type: string
      responses:
        '200':
          description: Answer to the question
          content:
            application/json:
              schema:
                type: object
  /learnings:
    get:
      summary: /learnings
      description: Get learnings about the codebase
      parameters:
        - name: question
          in: query
          description: Question to filter learnings
          schema:
            type: string
          example: "What are the core user stories in this project?"
      responses:
        '200':
          description: Learnings about the codebase
          content:
            application/json:
              schema:
                type: object
                properties:
                  prompts:
                    type: array
                    items:
                      type: object
                  hints:
                    type: array
                    items:
                      type: object
  /learn:
    get:
      summary: /learn
      description: Learn about the codebase (requires authentication)
      responses:
        '200':
          description: Learning interface
          content:
            text/html:
              schema:
                type: string
        '401':
          description: Authentication required
  /seed_stories:
    post:
      summary: /seed_stories
      description: Seed the system with user stories
      parameters:
        - name: prompt
          in: query
          description: Prompt to generate stories
          schema:
            type: string
          example: "How does this repository work? Please provide a summary of the codebase, a few key files, and 50 core user stories."
      responses:
        '200':
          description: Seeded stories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
  /services_agent:
    get:
      summary: /services_agent
      description: Get services configuration using GitSee agent
      parameters:
        - name: owner
          in: query
          required: true
          description: GitHub repository owner
          schema:
            type: string
          example: "stakwork"
        - name: repo
          in: query
          required: true
          description: GitHub repository name
          schema:
            type: string
          example: "hive"
        - name: username
          in: query
          description: GitHub username for authentication
          schema:
            type: string
        - name: pat
          in: query
          description: Personal access token for authentication
          schema:
            type: string
      responses:
        '200':
          description: Request ID for checking progress
          content:
            application/json:
              schema:
                type: object
                properties:
                  request_id:
                    type: string
                  status:
                    type: string
  /agent:
    get:
      summary: /agent
      description: Run GitSee agent on a repository
      parameters:
        - name: owner
          in: query
          required: true
          description: GitHub repository owner
          schema:
            type: string
          example: "stakwork"
        - name: repo
          in: query
          required: true
          description: GitHub repository name
          schema:
            type: string
          example: "hive"
        - name: prompt
          in: query
          required: true
          description: Prompt for the agent
          schema:
            type: string
          example: "How do I set up this repo?"
        - name: system
          in: query
          description: System prompt for the agent
          schema:
            type: string
        - name: final_answer
          in: query
          description: Description for final answer
          schema:
            type: string
        - name: username
          in: query
          description: GitHub username for authentication
          schema:
            type: string
        - name: pat
          in: query
          description: Personal access token for authentication
          schema:
            type: string
      responses:
        '200':
          description: Request ID for checking progress
          content:
            application/json:
              schema:
                type: object
                properties:
                  request_id:
                    type: string
                  status:
                    type: string
  /gitsee:
    post:
      summary: /gitsee
      description: Handle GitSee API requests
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: GitSee response
          content:
            application/json:
              schema:
                type: object
  /gitsee/events/{owner}/{repo}:
    get:
      summary: /gitsee/events/{owner}/{repo}
      description: Server-sent events for GitSee
      parameters:
        - name: owner
          in: path
          required: true
          description: GitHub repository owner
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: GitHub repository name
          schema:
            type: string
      responses:
        '200':
          description: Server-sent events stream
          content:
            text/event-stream:
              schema:
                type: string
  /progress:
    get:
      summary: /progress
      description: Check progress of a long-running operation
      parameters:
        - name: request_id
          in: query
          required: true
          description: ID of the request to check
          schema:
            type: string
      responses:
        '200':
          description: Progress information
          content:
            application/json:
              schema:
                type: object
  /_cache/info:
    get:
      summary: /_cache/info
      description: Get information about the cache
      responses:
        '200':
          description: Cache information
          content:
            application/json:
              schema:
                type: object
  /_cache/clear:
    post:
      summary: /_cache/clear
      description: Clear the cache
      responses:
        '200':
          description: Cache cleared
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string